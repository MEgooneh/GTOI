تعاریف
=============

تعریف گراف جهت دار
-----------------
فرض کنید تعدادی شهر داریم که توسط جاده هایی به هم متصل هستند و شما در شهر گلابی هستید و می‌خواهید به شهر سیب بروید(شکل ۱).
برای رسیدن به شهر گلابی باید از تعدادی جاده عبور کنیم ولی از آنجایی که جاده‌ها می‌توانند یک‌طرفه باشند, به گرافی نیاز داریم که جهت هر جاده را به ما نشان دهد که به آن گراف جهت دار گوییم(شکل ۲).

(شکل ۱ و ۲ باید بیاد اینجا)

به بیان دقیق تر, گراف جهت دار 
:math: `G`
یک زوج مرتب
:math: `{V, E}`
است که V مجموعه راس های گراف است. همچنین E یک مجموعه شامل زوج مرتب 
:math: `{u, v}`
است به این معنا که یک یال جهت دار از 
:math: `u`
به 
:math: `v`
در گراف وجود دارد.

به گراف جهت دار 
:math: `G`
ساده میگوییم اگر شامل یال های جهت دار چند گانه و طوقه نباشد. البته توجه داشته باشید که ممکن است 
:math: `G`
ساده باشد و شامل 
:math: `{u, v}`
و
:math: `{v, u}`
باشد. ولی نمیتواند ۲ تاز از زوج مرتب 
:math: `{u, v}`
را داشته باشد.

درجه در گراف جهت دار
----------------------
در یک گراف جهت دار, هر راس یک درجه ورودی و یک درجه خروجی دارد. برای مثال در شکل۲, درجه ورودی راس سیب برابر با ۳ و درجه خروجی آن برابر با ۱ است!
درجه ورودی را با نماد :
(نماد درجه ورودی)
و درجه خروجی را با :
(نماد درجه خروجی)
نمایش می‌دهیم.


دور و مسیر در گراف جهت دار 
----------------------
مشابه گراف های ساده, در گراف های جهت دار هم تعاریفی مانند دور و مسیر داریم. 
برای مثال در شکل۲, یک مسیر جهت دار میتواند مسیری به شکل :
:math: `گلابی, خیار, پرتقال, سیب`
باشد که راس شروع همان مبدا سفر(سیب) و راس پایان همان مقصد سفر(گلابی) می‌باشد. دقت کنید در طی کردن یال ها باید جهت یال رعایت شود. برای مثال هنگامی که در راس سیب هستیم, نمی‌توانیم به راس گلابی به صورت مستقیم برویم!
همچنین یک دور در شکل۲ می‌تواند به صورت : 
:math: `سیب, خیار, پرتقال, سیب`


باشد.بدیهتا باید در هنگام طی کردن دور جهت یال ها رعایت شود.
به طور مشابه, طول یک مسیر و دور جهت دار همان تعداد یال ها است.
به بیان دقیق تر, دنباله :
:math: `v_1, v_2, ..., v_n`
یک مسیر در گراف جهت دار 
:math: `G`
است, اگر به ازای هر :
:math: `1 <= i < n`
یال
:math: `{v_i, v_i+1}`
در :math: `G` باشد. همچنین همه :math: `v_i` ها متمایز باشند. 
طول این مسیر برابر با
:math: `n - 1`
است.

به طور مشابه دنباله :
:math: `v_1, v_2, ..., v_n, v_1`
یک دور جهت دار است, اگر به ازای هر :
:math: `1 <= i <= n`
یال
:math: `{v_i, v_i+1}`
در :math: `G` باشد. همچنین همه :math: `v_i` ها متمایز باشند(به جز math: `v_1` که راس شروع است). 
طول این دور برابر با 

:math: `n`
است.

قضایا و لم های مورد استفاده در این بخش 
--------------------------


**قضیه 3.1.1**
~~~~~~~~~~~~~

**صورت قضیه :** در گراف جهت دار :math: `G`, داریم :
:math: `sigma d_i = sigma d_i`


**اثبات قضیه :** برهان این قضیه بسیار ساده است(این قضیه مشابه با زوج بودن مجموع درجات در گراف ساده است). هر یال از این گراف را که در نظر بگیرید, به شروع یک درجه خروجی اضافه می‌کند و به راس پایان یک درجه ورودی اضافه میکند. در نتیجه یک واحد به طرف راست تساوی و یک واحد به طرف چپ تساوی اضافه می‌شود!


**قضیه 3.1.2**
~~~~~~~~~~~~~

**صورت قضیه :** اگر در گراف جهت دار :math: `G`, درجه خروجی(یا درجه ورودی) هر راس حداقل ۱ باشد, آنگار این گراف حداقل یک دور جهت‌دار دارد.


**اثبات قضیه :** برهان این قضیه نیز ساده است(این قضیه مشابه با دور داشتن گراف ساده‌ای است که درجه هر راس آن حداقل ۲ است). بلند ترین مسیر گراف را در نظر بگیرید.

فرض کنید این بلند ترین مسیر به صورت :
:math: `v_1, v_2, ..., v_n`
باشد.

حال راس :math: `v_n` را در نظر بگیرید. از آنجا که این راس حداقل یک درجه خروجی دارد, پس راسی مانند :math: `x` وجود دارد به طوری که از math: `v_n` به math: `x` یک یال جهت دار است.از طرفی راس math: `x` نمی‌تواند خارج از مسیر بالا باشد. زیرا در اینصورت یک مسیر بلند تر به طول :math: `n` در گراف پیدا شده که خلاف فرض است(زیرا فرض کردیم مسیر بالا بلند ترین مسیر است!).

پس راس :math: `x` یکی از راس های مسیر است. برای مثال فرض کنید : 
:math: `x = v_j`

حال یک دور در گراف پیدا کردیم :

:math: `v_(j), v_(j+1), ..., v_(n)`
